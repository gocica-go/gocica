// Code generated by MockGen. DO NOT EDIT.
// Source: local.go
//
// Generated by this command:
//
//	mockgen -source=local.go -destination=mock.go -package=local
//

// Package local is a generated GoMock package.
package local

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBackend) Get(ctx context.Context, outputID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, outputID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBackendMockRecorder) Get(ctx, outputID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBackend)(nil).Get), ctx, outputID)
}

// Put mocks base method.
func (m *MockBackend) Put(ctx context.Context, outputID string, size int64) (string, OpenerWithUnlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, outputID, size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(OpenerWithUnlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Put indicates an expected call of Put.
func (mr *MockBackendMockRecorder) Put(ctx, outputID, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBackend)(nil).Put), ctx, outputID, size)
}

// MockOpenerWithUnlock is a mock of OpenerWithUnlock interface.
type MockOpenerWithUnlock struct {
	ctrl     *gomock.Controller
	recorder *MockOpenerWithUnlockMockRecorder
	isgomock struct{}
}

// MockOpenerWithUnlockMockRecorder is the mock recorder for MockOpenerWithUnlock.
type MockOpenerWithUnlockMockRecorder struct {
	mock *MockOpenerWithUnlock
}

// NewMockOpenerWithUnlock creates a new mock instance.
func NewMockOpenerWithUnlock(ctrl *gomock.Controller) *MockOpenerWithUnlock {
	mock := &MockOpenerWithUnlock{ctrl: ctrl}
	mock.recorder = &MockOpenerWithUnlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenerWithUnlock) EXPECT() *MockOpenerWithUnlockMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockOpenerWithUnlock) Open() (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockOpenerWithUnlockMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOpenerWithUnlock)(nil).Open))
}
