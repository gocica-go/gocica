// Code generated by MockGen. DO NOT EDIT.
// Source: upload.go
//
// Generated by this command:
//
//	mockgen -source=upload.go -destination=mock/upload.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	v1 "github.com/mazrean/gocica/internal/proto/gocica/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockUploadClient is a mock of UploadClient interface.
type MockUploadClient struct {
	ctrl     *gomock.Controller
	recorder *MockUploadClientMockRecorder
	isgomock struct{}
}

// MockUploadClientMockRecorder is the mock recorder for MockUploadClient.
type MockUploadClientMockRecorder struct {
	mock *MockUploadClient
}

// NewMockUploadClient creates a new mock instance.
func NewMockUploadClient(ctrl *gomock.Controller) *MockUploadClient {
	mock := &MockUploadClient{ctrl: ctrl}
	mock.recorder = &MockUploadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadClient) EXPECT() *MockUploadClientMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockUploadClient) Commit(ctx context.Context, blockIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, blockIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUploadClientMockRecorder) Commit(ctx, blockIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUploadClient)(nil).Commit), ctx, blockIDs)
}

// UploadBlock mocks base method.
func (m *MockUploadClient) UploadBlock(ctx context.Context, blockID string, r io.ReadSeekCloser) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBlock", ctx, blockID, r)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBlock indicates an expected call of UploadBlock.
func (mr *MockUploadClientMockRecorder) UploadBlock(ctx, blockID, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBlock", reflect.TypeOf((*MockUploadClient)(nil).UploadBlock), ctx, blockID, r)
}

// UploadBlockFromURL mocks base method.
func (m *MockUploadClient) UploadBlockFromURL(ctx context.Context, blockID, url string, offset, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBlockFromURL", ctx, blockID, url, offset, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBlockFromURL indicates an expected call of UploadBlockFromURL.
func (mr *MockUploadClientMockRecorder) UploadBlockFromURL(ctx, blockID, url, offset, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBlockFromURL", reflect.TypeOf((*MockUploadClient)(nil).UploadBlockFromURL), ctx, blockID, url, offset, size)
}

// MockBaseBlobProvider is a mock of BaseBlobProvider interface.
type MockBaseBlobProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBaseBlobProviderMockRecorder
	isgomock struct{}
}

// MockBaseBlobProviderMockRecorder is the mock recorder for MockBaseBlobProvider.
type MockBaseBlobProviderMockRecorder struct {
	mock *MockBaseBlobProvider
}

// NewMockBaseBlobProvider creates a new mock instance.
func NewMockBaseBlobProvider(ctrl *gomock.Controller) *MockBaseBlobProvider {
	mock := &MockBaseBlobProvider{ctrl: ctrl}
	mock.recorder = &MockBaseBlobProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseBlobProvider) EXPECT() *MockBaseBlobProviderMockRecorder {
	return m.recorder
}

// GetEntries mocks base method.
func (m *MockBaseBlobProvider) GetEntries(ctx context.Context) (map[string]*v1.IndexEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntries", ctx)
	ret0, _ := ret[0].(map[string]*v1.IndexEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntries indicates an expected call of GetEntries.
func (mr *MockBaseBlobProviderMockRecorder) GetEntries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntries", reflect.TypeOf((*MockBaseBlobProvider)(nil).GetEntries), ctx)
}

// GetOutputBlockURL mocks base method.
func (m *MockBaseBlobProvider) GetOutputBlockURL(ctx context.Context) (string, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputBlockURL", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetOutputBlockURL indicates an expected call of GetOutputBlockURL.
func (mr *MockBaseBlobProviderMockRecorder) GetOutputBlockURL(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputBlockURL", reflect.TypeOf((*MockBaseBlobProvider)(nil).GetOutputBlockURL), ctx)
}

// GetOutputs mocks base method.
func (m *MockBaseBlobProvider) GetOutputs(ctx context.Context) ([]*v1.ActionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputs", ctx)
	ret0, _ := ret[0].([]*v1.ActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputs indicates an expected call of GetOutputs.
func (mr *MockBaseBlobProviderMockRecorder) GetOutputs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputs", reflect.TypeOf((*MockBaseBlobProvider)(nil).GetOutputs), ctx)
}
