// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/mazrean/gocica/internal/cacheprog"
	"github.com/mazrean/gocica/internal/config"
	"github.com/mazrean/gocica/internal/local"
	log2 "github.com/mazrean/gocica/internal/pkg/log"
	"github.com/mazrean/gocica/internal/remote"
	"github.com/mazrean/gocica/log"
	"golang.org/x/sync/errgroup"
)

// Injectors from wire.go:

func InjectApp(cmdInfo config.CmdInfo) (*App, error) {
	configConfig, err := config.Load(cmdInfo)
	if err != nil {
		return nil, err
	}
	logger := newLogger(configConfig)
	disk, err := local.NewDisk(logger, configConfig)
	if err != nil {
		return nil, err
	}
	gitHubActionsCache, err := remote.NewGitHubActionsCache(logger, configConfig, disk)
	if err != nil {
		return nil, err
	}
	conbinedBackend, err := cacheprog.NewConbinedBackend(logger, disk, gitHubActionsCache)
	if err != nil {
		return nil, err
	}
	cacheProg := cacheprog.NewCacheProg(logger, conbinedBackend)
	app := newApp(logger, configConfig, cacheProg)
	return app, nil
}

// wire.go:

type App struct {
	logger    log.Logger
	config    *config.Config
	cacheprog *cacheprog.CacheProg
}

func newApp(
	logger log.Logger, config2 *config.Config, cacheprog2 *cacheprog.CacheProg,
) *App {
	return &App{
		logger:    logger,
		config:    config2,
		cacheprog: cacheprog2,
	}
}

func (a *App) Run() error {
	if err := a.config.Dev.StartProfiling(); err != nil {
		a.logger.Warnf("failed to start profiling: %v", err)
	}
	defer a.config.Dev.StopProfiling()

	eg := errgroup.Group{}
	eg.Go(func() error {
		return a.cacheprog.Run()
	})

	if err := eg.Wait(); err != nil {
		return err
	}

	return nil
}

func newLogger(config2 *config.Config) log.Logger {
	switch config2.LogLevel {
	case "silent":
		return log2.NewLogger(log2.Silent)
	case "error":
		return log2.NewLogger(log2.Error)
	case "warn":
		return log2.NewLogger(log2.Warn)
	case "info":
	case "debug":
		return log2.NewLogger(log2.Debug)
	}
	log.DefaultLogger.
		Warnf("invalid log level: %s. ignore and use default info level instead", config2.LogLevel)
	return log.DefaultLogger
}
