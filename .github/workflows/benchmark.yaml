name: Benchmark

on:
  workflow_dispatch:

permissions:
  actions: write

jobs:
  setup_modcache:
    name: Setup modcache
    runs-on: ubuntu-latest
    env:
      GOMODCACHE: /tmp/gocache/mod
      GOCACHE: /tmp/gocache/build
    steps:
      - uses: actions/checkout@v4
        with:
          repository: traPtitech/traQ
          ref: v3.22.0
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false # Disable cache for redundant cache clearing
      - uses: actions/cache@v4 # Go mod cache(not covered by Go setup cache)
        with:
          path: ${{ env.GOMODCACHE }}
          key: go-mod-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-mod-${{ runner.os }}-${{ github.ref }}-
            go-mod-${{ runner.os }}-
      - run: go mod download
  no_cache_gocica_github:
    name: GoCICa GitHub(No Cache)
    runs-on: ubuntu-latest
    needs: [setup_modcache]
    strategy:
      matrix:
        id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 1
    env:
      GOMODCACHE: /tmp/gocache/mod
      GOCACHE: /tmp/gocache/build
    steps:
      - name: Clear cache
        uses: actions/github-script@v6
        with:
          script: |
            console.log("About to clear")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "gocica-cache-"
            })
            for (const cache of caches.data.actions_caches) {
              console.log(cache)
              github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              })
            }
            console.log("Clear completed")
      - uses: actions/checkout@v4
        with:
          repository: traPtitech/traQ
          ref: v3.22.0
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false # Disable cache for redundant cache clearing
      - uses: actions/cache@v4 # Go mod cache(not covered by Go setup cache)
        with:
          path: ${{ env.GOMODCACHE }}
          key: go-mod-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-mod-${{ runner.os }}-${{ github.ref }}-
            go-mod-${{ runner.os }}-
      - uses: gocica-go/gocica-action@v0.1.0-alpha1
      - run: go mod download
      - run: time go build -o traQ -ldflags "-s -w -X main.version=Dev -X main.revision=Local"
        env:
          CGO_ENABLED: 0
  cache_gocica_github:
    name: GoCICa GitHub(Cache)
    runs-on: ubuntu-latest
    needs: [no_cache_gocica_github, setup_modcache]
    strategy:
      matrix:
        id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 1
    env:
      GOMODCACHE: /tmp/gocache/mod
      GOCACHE: /tmp/gocache/build
    steps:
      - uses: actions/checkout@v4
        with:
          repository: traPtitech/traQ
          ref: v3.22.0
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false # Disable cache for redundant cache clearing
      - uses: actions/cache@v4 # Go mod cache(not covered by Go setup cache)
        with:
          path: ${{ env.GOMODCACHE }}
          key: go-mod-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-mod-${{ runner.os }}-${{ github.ref }}-
            go-mod-${{ runner.os }}-
      - uses: gocica-go/gocica-action@v0.1.0-alpha1
      - run: go mod download
      - run: time go build -o traQ -ldflags "-s -w -X main.version=Dev -X main.revision=Local"
        env:
          CGO_ENABLED: 0
  no_cache_gocica_s3:
    name: GoCICa S3(No Cache)
    runs-on: ubuntu-latest
    needs: [setup_modcache]
    strategy:
      matrix:
        id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 1
    env:
      GOMODCACHE: /tmp/gocache/mod
      GOCACHE: /tmp/gocache/build
    steps:
      - name: Clear cache
        run: aws s3 rm --recursive s3://${{ secrets.GOCICA_S3_BUCKET }}
        env:
          AWS_DEFAULT_REGION: ${{ secrets.GOCICA_S3_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.GOCICA_S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GOCICA_S3_SECRET_ACCESS_KEY }}
      - uses: actions/checkout@v4
        with:
          repository: traPtitech/traQ
          ref: v3.22.0
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false # Disable cache for redundant cache clearing
      - uses: actions/cache@v4 # Go mod cache(not covered by Go setup cache)
        with:
          path: ${{ env.GOMODCACHE }}
          key: go-mod-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-mod-${{ runner.os }}-${{ github.ref }}-
            go-mod-${{ runner.os }}-
      - uses: gocica-go/gocica-action@v0.1.0-alpha1
      - run: go mod download
      - run: time go build -o traQ -ldflags "-s -w -X main.version=Dev -X main.revision=Local"
        env:
          CGO_ENABLED: 0
  cache_gocica_s3:
    name: GoCICa S3(Cache)
    runs-on: ubuntu-latest
    needs: [no_cache_gocica_s3, setup_modcache]
    strategy:
      matrix:
        id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 1
    env:
      GOMODCACHE: /tmp/gocache/mod
      GOCACHE: /tmp/gocache/build
    steps:
      - uses: actions/checkout@v4
        with:
          repository: traPtitech/traQ
          ref: v3.22.0
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false # Disable cache for redundant cache clearing
      - uses: actions/cache@v4 # Go mod cache(not covered by Go setup cache)
        with:
          path: ${{ env.GOMODCACHE }}
          key: go-mod-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-mod-${{ runner.os }}-${{ github.ref }}-
            go-mod-${{ runner.os }}-
      - uses: gocica-go/gocica-action@v0.1.0-alpha1
        with:
          remote: s3
          s3-bucket: ${{ secrets.GOCICA_S3_BUCKET }}
          s3-region: ${{ secrets.GOCICA_S3_REGION }}
          s3-access-key: ${{ secrets.GOCICA_S3_ACCESS_KEY }}
          s3-secret-access-key: ${{ secrets.GOCICA_S3_SECRET_ACCESS_KEY }}
      - run: go mod download
      - run: time go build -o traQ -ldflags "-s -w -X main.version=Dev -X main.revision=Local"
        env:
          CGO_ENABLED: 0
  no_cache_default:
    name: action/cache(No Cache)
    runs-on: ubuntu-latest
    needs: [setup_modcache]
    strategy:
      matrix:
        id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 1
    env:
      GOMODCACHE: /tmp/gocache/mod
      GOCACHE: /tmp/gocache/build
    steps:
      - uses: actions/checkout@v4
        with:
          repository: traPtitech/traQ
          ref: v3.22.0
          fetch-depth: 0
      - name: Clear cache
        uses: actions/github-script@v6
        with:
          script: |
            console.log("About to clear")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "go-build-"
            })
            for (const cache of caches.data.actions_caches) {
              console.log(cache)
              github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              })
            }
            console.log("Clear completed")
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false # Disable cache for redundant cache clearing
      - uses: actions/cache@v4 # Go mod cache(not covered by Go setup cache)
        with:
          path: ${{ env.GOMODCACHE }}
          key: go-mod-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-mod-${{ runner.os }}-${{ github.ref }}-
            go-mod-${{ runner.os }}-
      - uses: actions/cache@v4 # Go build cache
        with:
          path: ${{ env.GOCACHE }}
          key: go-build-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-build-${{ runner.os }}-${{ github.ref }}-
            go-build-${{ runner.os }}-
      - run: go mod download
      - run: time go build -o traQ -ldflags "-s -w -X main.version=Dev -X main.revision=Local"
        env:
          CGO_ENABLED: 0
  cache_default:
    name: action/cache(Cache)
    runs-on: ubuntu-latest
    needs: [no_cache_default, setup_modcache]
    strategy:
      matrix:
        id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      max-parallel: 1
    env:
      GOMODCACHE: /tmp/gocache/mod
      GOCACHE: /tmp/gocache/build
    steps:
      - uses: actions/checkout@v4
        with:
          repository: traPtitech/traQ
          ref: v3.22.0
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache: false # Disable cache for redundant cache clearing
      - uses: actions/cache@v4 # Go mod cache(not covered by Go setup cache)
        with:
          path: ${{ env.GOMODCACHE }}
          key: go-mod-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-mod-${{ runner.os }}-${{ github.ref }}-
            go-mod-${{ runner.os }}-
      - uses: actions/cache@v4 # Go build cache
        with:
          path: ${{ env.GOCACHE }}
          key: go-build-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            go-build-${{ runner.os }}-${{ github.ref }}-
            go-build-${{ runner.os }}-
      - run: go mod download
      - run: time go build -o traQ -ldflags "-s -w -X main.version=Dev -X main.revision=Local"
        env:
          CGO_ENABLED: 0
